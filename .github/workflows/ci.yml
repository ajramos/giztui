name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -timeout 3m ./internal/config ./internal/db ./internal/services ./pkg/...

    - name: Run tests with race detector
      run: go test -race -timeout 2m ./internal/services

    - name: Run vet
      run: go vet -composites=false ./...

    - name: Run fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          exit 1
        fi

    - name: Build
      run: make build

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.61.0
        args: --issues-exit-code=0

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Run security scan
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  build:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Create build directory
      run: mkdir -p build

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o build/giztui-linux-amd64 ./cmd/giztui
        GOOS=darwin GOARCH=amd64 go build -o build/giztui-darwin-amd64 ./cmd/giztui
        GOOS=darwin GOARCH=arm64 go build -o build/giztui-darwin-arm64 ./cmd/giztui
        GOOS=windows GOARCH=amd64 go build -o build/giztui-windows-amd64.exe ./cmd/giztui

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: giztui-binaries
        path: build/
