name: Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: [1.21, 1.22, 1.23]
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Install dependencies
      run: |
        go mod download
        go install github.com/vektra/mockery/v2@latest
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        
    - name: Generate mocks
      run: make test-mocks
      
    - name: Run linter
      run: golangci-lint run
      
    - name: Run unit tests
      run: make test-unit
      
    - name: Run TUI tests
      run: make test-tui
      
    - name: Run tests with coverage
      run: make test-coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        
    - name: Run integration tests
      run: make test-integration
      env:
        GMAIL_TEST_CREDENTIALS: ${{ secrets.GMAIL_TEST_CREDENTIALS }}
        
    - name: Run performance tests
      run: make test-performance
      
    - name: Run load tests
      run: make test-load
      
    - name: Check for goroutine leaks
      run: |
        go test -v ./test/helpers/... -run TestAsyncOperations
        # goleak will fail the test if there are leaks
        
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23
        
    - name: Install dependencies
      run: |
        go mod download
        go install github.com/vektra/mockery/v2@latest
        
    - name: Generate mocks
      run: make test-mocks
      
    - name: Run visual regression tests
      run: make test-tui
      env:
        UPDATE_SNAPSHOTS: false
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-snapshots
        path: testdata/snapshots/
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        
  notify:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [test, visual-regression, security]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#gmail-tui-tests'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Comment on PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('Test Results'));
          
          const testResults = {
            test: '${{ needs.test.result }}',
            visual: '${{ needs.visual-regression.result }}',
            security: '${{ needs.security.result }}'
          };
          
          const commentBody = `## Test Results Summary
          
          âœ… **Unit & TUI Tests**: ${testResults.test}
          ðŸŽ¨ **Visual Regression**: ${testResults.visual}
          ðŸ”’ **Security Scan**: ${testResults.security}
          
          [View full results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
          }