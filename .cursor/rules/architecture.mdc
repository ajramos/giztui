---
alwaysApply: true
---

Title: Gmail TUI Service-Oriented Architecture & Module Boundaries

Summary
- Objective: Keep `package tui` modular and maintainable with service-oriented architecture.
- Architecture: Business logic in `internal/services/`, UI logic in `internal/tui/`
- Key Change: Services handle business logic, UI handles presentation only.

Directory & Files Structure:

## Services Layer (internal/services/)
- interfaces.go: Service contracts and interfaces
- email_service.go: Email operations (archive, trash, compose, send)
- ai_service.go: LLM integration with caching and streaming
- label_service.go: Gmail label management operations
- cache_service.go: SQLite-based caching for AI summaries
- repository.go: Data access abstraction for Gmail API

## UI Layer (internal/tui/)
- app.go: Application wiring, service integration, thread-safe accessors, ErrorHandler setup
- error_handler.go: Centralized error handling and user feedback
- layout.go: UI layout creation and focus indicators 
- keys.go: Global key bindings and input routing (calls services, not business logic)
- messages.go: Message list & content UI (uses EmailService for operations)
- labels.go: Label management UI (uses LabelService for operations)  
- ai.go: LLM features UI (uses AIService for operations)
- markdown.go: Markdown rendering & toggle UI
- logging.go: Logger setup/teardown
- commands.go: Command bar UI

Rules & Constraints

## Service Layer Rules
- ALL business logic must be in services, never in UI components
- Services must implement interfaces defined in interfaces.go
- Services are accessed via app.GetServices() - never instantiated directly
- Use context.Context for cancellation and timeouts
- Return meaningful errors that can be handled by ErrorHandler

## UI Layer Rules  
- UI components handle ONLY presentation and user input
- Use ErrorHandler for ALL user feedback: app.GetErrorHandler().ShowError/ShowSuccess()
- Use thread-safe accessors: app.GetCurrentView(), app.SetCurrentMessageID(), etc.
- NO direct field access: never use app.currentView = "x", use app.SetCurrentView("x")
- UI thread safety: All UI mutations via a.QueueUpdateDraw(...) 
- Key handling: keys.go routes to UI methods, which call services for business logic

## Thread Safety Rules
- All app state access must use provided getter/setter methods
- Never access app struct fields directly (race conditions)
- Copy slices/maps when returning from getters
- Use mutex protection for any new state fields

## Error Handling Rules
- NEVER use fmt.Printf, log.Printf for user-facing messages
- Always use app.GetErrorHandler() for user feedback
- Log technical errors, show user-friendly messages
- Use appropriate error levels (Error, Warning, Success, Info, Progress)

Naming & Style
- English only for code and comments. Follow Go conventions.
- Functions: verbs (DoX, ShowX, ToggleX), variables: full words, descriptive.
- Keep public surface minimal inside tui (prefer unexported functions).

Concurrency Patterns
- fetch → process → a.QueueUpdateDraw(func(){ apply })
- For heavy transforms (e.g., Markdown → ANSI), precompute off the UI thread, then SetText once.
- Never block input handler; if needed, spawn goroutine and return.

Feature Placement Guide
- Message list/content → messages.go
- Labels (UI + apply/remove) → labels.go
- AI (summary, suggest labels) → ai.go
- Slack integration → slack.go
- Obsidian integration → obsidian.go
- Attachments picker → attachments.go
- Links picker → links.go
- Prompts picker → prompts.go
- Bulk prompts → bulk_prompts.go
- Saved queries → saved_queries.go
- Themes picker → themes.go
- Statistics → stats.go
- Markdown toggle/render → markdown.go
- Command bar & execution → commands.go
- Status/flash → status.go
- Layout & focus → layout.go

## Picker State Management (CRITICAL)
- **ALWAYS use ActivePicker enum** for side panel pickers
- **Available picker types**: PickerNone, PickerLabels, PickerDrafts, PickerObsidian, PickerAttachments, PickerLinks, PickerPrompts, PickerBulkPrompts, PickerSavedQueries, PickerThemes, PickerAI, PickerContentSearch, PickerRSVP
- **NEVER use shared boolean flags** like `labelsVisible` (causes race conditions)
- Use `setActivePicker()` and specific picker check methods

## Documentation References
- `docs/README.md` - Documentation hub and navigation
- `docs/ARCHITECTURE.md` - Complete architectural patterns
- `docs/TESTING.md` - Testing framework and quality assurance
- `docs/THEMING.md` - Theme system and component guidelines
- `CLAUDE.md` - Essential development patterns and anti-patterns

Testing & Safety
- After edits in tui/, ensure go build succeeds.
- Prefer small, incremental edits with local run verification.
- Add logs behind a.debug when diagnosing issues; trim once stable.
- Use testing framework in `test/helpers/` for comprehensive validation

Change Discipline
- Do not add new responsibilities into app.go; extend the appropriate file/module.
- If a function grows too large, split into private helpers within the same file first.
