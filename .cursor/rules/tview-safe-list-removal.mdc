---
description: When handling lists of visual items
alwaysApply: false
---
# Cursor Rules for gmail-tui

## tview-safe-list-removal

When removing items from `tview.List` (trash, archive, move), follow this safe pattern to avoid panics and ensure consistent state:

- Perform all UI and state mutations inside `a.QueueUpdateDraw(func(){ ... })`.
- Determine `removeIndex` from the list selection; clamp to bounds. If invalid, fallback to 0.
- If `count > 1`, preselect a different index than `removeIndex` (e.g., `pre := removeIndex - 1` or `1` if `removeIndex == 0`) via `list.SetCurrentItem(pre)` before removal.
- Update caches (`a.ids`, `a.messagesMeta`) using the same `removeIndex` as the list.
- If `count == 1`, use `list.Clear()` and set next selection to `-1`.
- Else, call `list.RemoveItem(removeIndex)` and then set the next selection if within range.
- Update the list title count and refresh the right pane: if there is a next selection, load it (`showMessageWithoutFocus`); otherwise show "No messages".

This rule must be applied to:
- `trashSelected` (key `d`)
- `archiveSelected` (key `a`)
- `moveSelected` (key `m`)

## UI Thread Safety

- Never mutate tview components outside of `a.QueueUpdateDraw`.
- Network calls must run in goroutines; surface results via `QueueUpdateDraw`.

## Module Boundaries (tui/)

- Keep feature logic in the appropriate file per our architecture guidelines (messages.go, labels.go, ai.go, markdown.go, etc.).


