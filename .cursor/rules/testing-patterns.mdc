---
description: Testing patterns for service-oriented Gmail TUI
alwaysApply: false
---

# Testing Patterns - Gmail TUI

## Comprehensive Testing Framework

GizTUI uses a sophisticated testing framework located in `test/helpers/` with multiple testing layers:

1. **Component Testing** - TUI components using `tcell.SimulationScreen`
2. **Service Testing** - Business logic with mocked dependencies
3. **Integration Testing** - Real services using VCR recording
4. **Visual Regression Testing** - UI consistency using snapshots
5. **Performance Testing** - Benchmarks and load testing

See `docs/TESTING.md` for complete framework documentation.

## Service Layer Testing

### **Unit Testing Services with Mock Dependencies**
```go
// Test structure for services using mockery-generated mocks
func TestEmailService_ArchiveMessage(t *testing.T) {
    // Arrange
    mockClient := mocks.NewMockGmailClient(t)
    mockRepo := mocks.NewMockRepository(t)
    service := NewEmailService(mockRepo, mockClient, config)

    // Setup mock expectations
    mockClient.On("ArchiveMessage", mock.Anything, "test-message-id").Return(nil)

    // Act
    err := service.ArchiveMessage(context.Background(), "test-message-id")

    // Assert
    assert.NoError(t, err)
    mockClient.AssertExpectations(t)
}
```

### **Service Testing Rules**
- Mock external dependencies (Gmail API, LLM providers)
- Test error conditions and edge cases
- Use table-driven tests for multiple scenarios
- Test context cancellation behavior
- Verify service interface compliance

### **Mock Interfaces**
```go
type MockGmailClient struct {
    calls []string
    responses map[string]interface{}
    errors map[string]error
}

func (m *MockGmailClient) ArchiveMessage(messageID string) error {
    m.calls = append(m.calls, "ArchiveMessage")
    if err, exists := m.errors["ArchiveMessage"]; exists {
        return err
    }
    return nil
}

func (m *MockGmailClient) WasCalled(method string) bool {
    for _, call := range m.calls {
        if call == method {
            return true
        }
    }
    return false
}
```

## TUI Component Testing with Test Harness

### **Component Testing with SimulationScreen**
```go
func TestMessageList_KeyboardNavigation(t *testing.T) {
    // Use test harness for TUI component testing
    harness := helpers.NewTestHarness(t)
    defer harness.Cleanup()

    // Setup mock expectations
    harness.MockRepo.On("GetMessages", mock.Anything, mock.Anything).
        Return(&services.MessagePage{
            Messages: harness.GenerateTestMessages(10),
        }, nil)

    // Test component
    component := harness.App.GetMessageListComponent()
    harness.DrawComponent(component)

    // Simulate keyboard input
    harness.SimulateKeyEvent(tcell.KeyDown, 0, tcell.ModNone)
    harness.SimulateKeyEvent(tcell.KeyEnter, 0, tcell.ModNone)

    // Validate screen content and state
    harness.AssertScreenContains(t, "Expected Content")
    assert.Equal(t, "expected-message-id", harness.App.GetCurrentMessageID())
}
```

### **UI Testing Rules**
- Mock all services for UI tests
- Test user interaction flows
- Verify error handling displays correct messages
- Test keyboard navigation and shortcuts
- Test responsive layout behavior

## Integration Testing

### **Service Integration Tests**
```go
func TestEmailService_Integration(t *testing.T) {
    if testing.Short() {
        t.Skip("Skipping integration test")
    }

    // Use real Gmail client with test credentials
    client := setupTestGmailClient(t)
    service := NewEmailService(NewMessageRepository(client), client, renderer)

    // Test actual API calls
    err := service.ArchiveMessage(context.Background(), testMessageID)
    assert.NoError(t, err)
}
```

### **End-to-End Testing**
```go
func TestFullWorkflow_ArchiveEmail(t *testing.T) {
    // Start with real app instance
    app := setupTestApp(t)

    // Simulate user workflow
    // 1. Load messages
    // 2. Select message
    // 3. Archive action
    // 4. Verify UI update
}
```

## Test Utilities

### **Test App Factory**
```go
func NewTestApp() *App {
    app := &App{
        Application: tview.NewApplication(),
        ctx:         context.Background(),
    }

    // Initialize with mock services
    app.emailService = &MockEmailService{}
    app.aiService = &MockAIService{}
    app.errorHandler = NewMockErrorHandler()

    return app
}
```

### **Common Test Helpers**
```go
func setupTestContext() context.Context {
    return context.WithTimeout(context.Background(), 5*time.Second)
}

func assertErrorHandlerCalled(t *testing.T, handler *MockErrorHandler, method string) {
    assert.True(t, handler.WasCalled(method),
        "Expected ErrorHandler.%s to be called", method)
}
```

## Testing Checklist

### **Service Tests**
- [ ] Happy path functionality
- [ ] Error conditions and edge cases
- [ ] Context cancellation
- [ ] Interface compliance
- [ ] Mock external dependencies

### **UI Tests**
- [ ] User interaction flows
- [ ] Keyboard shortcuts work
- [ ] Error messages display correctly
- [ ] Loading states visible
- [ ] Responsive layout behavior

### **Integration Tests**
- [ ] Service + API integration
- [ ] Full user workflows
- [ ] Error propagation
- [ ] Performance under load
- [ ] Memory leak detection

## Test Organization

```
internal/
├── services/
│   ├── email_service_test.go
│   ├── ai_service_test.go
│   └── mocks/
│       ├── mock_gmail_client.go
│       └── mock_llm_provider.go
├── tui/
│   ├── app_test.go
│   ├── messages_test.go
│   └── test_helpers.go
└── integration/
    ├── workflow_test.go
    └── api_test.go
```

## Testing Framework Integration

### **Test Harness for Comprehensive Testing**
```go
func TestBulkOperations(t *testing.T) {
    harness := helpers.NewTestHarness(t)
    defer harness.Cleanup()

    // Test bulk operations with helper
    helpers.TestBulkOperations(t, harness)
    helpers.TestBulkOperationEdgeCases(t, harness)
}

func TestVisualRegression(t *testing.T) {
    harness := helpers.NewTestHarness(t)
    defer harness.Cleanup()

    // Test UI consistency with snapshots
    component := harness.App.GetMessageListComponent()
    harness.DrawComponent(component)

    snapshot := harness.GetScreenContent()
    snaps.MatchSnapshot(t, snapshot, "message_list_rendering")
}

func TestAsyncOperations(t *testing.T) {
    harness := helpers.NewTestHarness(t)
    defer harness.Cleanup()

    // Test async operations and cancellation
    helpers.TestAsyncOperations(t, harness)
    helpers.TestAsyncOperationCancellation(t, harness)
}
```

## Running Tests with Make Commands

```bash
# Generate mocks first
make test-mocks

# Run all tests
make test-all

# Run specific test types
make test-unit      # Service layer tests
make test-tui       # TUI component tests
make test-integration # Integration tests
make test-coverage  # Tests with coverage report

# Update snapshots (use with caution)
make test-snapshots-update

# Performance testing
make test-performance
make test-load
```
