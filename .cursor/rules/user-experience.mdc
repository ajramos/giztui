---
alwaysApply: true
---

# User Experience Rules - Gmail TUI

## Core UX Principles

### üéØ **Professional TUI Standards**
- **Keyboard-driven**: 100% keyboard navigation, mouse optional
- **Responsive design**: Adapt to different terminal sizes gracefully
- **Visual feedback**: Clear indication of actions, states, and progress
- **Error resilience**: Graceful error handling with helpful messages

### üé® **Visual Design**
- **Consistent colors**: Use semantic colors (red=error, green=success, yellow=warning)
- **Clear hierarchy**: Headers, borders, and spacing create visual structure
- **Status indicators**: Always show current state and available actions
- **Focus indicators**: Clear visual cues for current selection/focus

## Key UX Patterns

### **Navigation**
```
Tab/Shift+Tab    - Navigate between components
Enter           - Select/activate current item
Esc             - Go back/cancel current action
?               - Show help/available shortcuts
:               - Open command mode
/               - Search/filter mode
```

### **Feedback Messages**
- **Success**: `‚úÖ Operation completed successfully`
- **Error**: `‚ùå Operation failed: reason`
- **Warning**: `‚ö†Ô∏è Caution: potential issue`  
- **Info**: `‚ÑπÔ∏è Information or status update`
- **Progress**: `‚è≥ Loading data...` (with persistent display)

### **List Management**
- **Status column**: Visual indicators (‚óè‚óã for read/unread)
- **Color coding**: Different colors for different states
- **Selection**: Clear highlight of current item
- **Bulk operations**: Multi-select with visual feedback

### **Responsive Layout**
- **Wide screens**: Side-by-side list and detail view
- **Medium screens**: Stacked layout with larger text
- **Narrow screens**: Single column, compact design
- **Dynamic resizing**: Smooth adaptation to terminal size changes

## Implementation Requirements

### **Error Handling UX**
```go
// ‚úÖ Good UX - Clear, actionable messages
app.GetErrorHandler().ShowError(ctx, "Failed to archive message")
app.GetErrorHandler().ShowSuccess(ctx, "Message archived successfully")
app.GetErrorHandler().ShowProgress(ctx, "Archiving messages...")
```

### **Visual States**
- **Loading states**: Show spinners or progress indicators
- **Empty states**: Helpful messages when no data available  
- **Error states**: Clear error messages with recovery options
- **Success states**: Confirmation of completed actions

### **Threading & Performance**
- **Non-blocking UI**: Never freeze interface during operations
- **Progressive loading**: Show data as it becomes available
- **Smooth updates**: Use `QueueUpdateDraw` for all UI changes
- **Responsive input**: Always accept user input, queue operations

## Color System

### **Semantic Colors**
- **Unread emails**: Orange/yellow for attention
- **Read emails**: Gray/muted for de-emphasis
- **Important emails**: Red for urgency
- **Sent emails**: Green for user actions
- **Draft emails**: Yellow for work in progress

### **UI Colors**
- **Borders**: Subtle gray, bright blue for focus
- **Text**: High contrast for readability
- **Backgrounds**: Dark theme by default, support light themes
- **Highlights**: Clear selection indicators

## Accessibility

### **Keyboard Access**
- Every action must have keyboard shortcut
- Logical tab order through interface
- Escape key always goes back/cancels
- Consistent key bindings across views

### **Visual Clarity**
- High contrast text and backgrounds  
- Clear focus indicators
- Consistent spacing and alignment
- Readable fonts and icon alternatives

### **Helpful Feedback**
- Status bar shows current context
- Help system accessible via `?`
- Error messages suggest solutions
- Progress indication for long operations

## Anti-Patterns to Avoid

### ‚ùå **Don't Do This**
- Silent failures without user feedback
- Blocking UI during network operations
- Inconsistent keyboard shortcuts
- Technical error messages shown to users
- Poor contrast or unclear visual hierarchy
- Missing loading indicators
- Inaccessible color-only information

### ‚úÖ **Do This Instead**
- Always show operation results to user
- Use async operations with progress feedback
- Consistent, memorable keyboard shortcuts  
- User-friendly error messages
- Clear visual hierarchy and focus
- Loading indicators for all async operations
- Semantic colors plus text/icons for clarity

## Testing UX

### **Manual Testing Checklist**
- [ ] All actions accessible via keyboard
- [ ] Clear visual feedback for every operation
- [ ] Error scenarios handled gracefully
- [ ] Responsive layout at different terminal sizes
- [ ] Loading states visible during operations
- [ ] Help system comprehensive and accessible

### **Performance Testing**
- [ ] UI remains responsive during heavy operations
- [ ] Large datasets don't freeze interface
- [ ] Smooth scrolling and navigation
- [ ] Quick startup time
- [ ] Efficient memory usage

---

**Reference**: See `docs/k9s-ui-reference.md` for comprehensive k9s analysis and advanced patterns.