// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	services "github.com/ajramos/gmail-tui/internal/services"
	mock "github.com/stretchr/testify/mock"
)

// AIService is an autogenerated mock type for the AIService type
type AIService struct {
	mock.Mock
}

// ApplyCustomPrompt provides a mock function with given fields: ctx, content, prompt, variables
func (_m *AIService) ApplyCustomPrompt(ctx context.Context, content string, prompt string, variables map[string]string) (string, error) {
	ret := _m.Called(ctx, content, prompt, variables)

	if len(ret) == 0 {
		panic("no return value specified for ApplyCustomPrompt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) (string, error)); ok {
		return rf(ctx, content, prompt, variables)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string) string); ok {
		r0 = rf(ctx, content, prompt, variables)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string) error); ok {
		r1 = rf(ctx, content, prompt, variables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyCustomPromptStream provides a mock function with given fields: ctx, content, prompt, variables, onToken
func (_m *AIService) ApplyCustomPromptStream(ctx context.Context, content string, prompt string, variables map[string]string, onToken func(string)) (string, error) {
	ret := _m.Called(ctx, content, prompt, variables, onToken)

	if len(ret) == 0 {
		panic("no return value specified for ApplyCustomPromptStream")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, func(string)) (string, error)); ok {
		return rf(ctx, content, prompt, variables, onToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string]string, func(string)) string); ok {
		r0 = rf(ctx, content, prompt, variables, onToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string]string, func(string)) error); ok {
		r1 = rf(ctx, content, prompt, variables, onToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormatContent provides a mock function with given fields: ctx, content, options
func (_m *AIService) FormatContent(ctx context.Context, content string, options services.FormatOptions) (string, error) {
	ret := _m.Called(ctx, content, options)

	if len(ret) == 0 {
		panic("no return value specified for FormatContent")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, services.FormatOptions) (string, error)); ok {
		return rf(ctx, content, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, services.FormatOptions) string); ok {
		r0 = rf(ctx, content, options)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, services.FormatOptions) error); ok {
		r1 = rf(ctx, content, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateReply provides a mock function with given fields: ctx, content, options
func (_m *AIService) GenerateReply(ctx context.Context, content string, options services.ReplyOptions) (string, error) {
	ret := _m.Called(ctx, content, options)

	if len(ret) == 0 {
		panic("no return value specified for GenerateReply")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, services.ReplyOptions) (string, error)); ok {
		return rf(ctx, content, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, services.ReplyOptions) string); ok {
		r0 = rf(ctx, content, options)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, services.ReplyOptions) error); ok {
		r1 = rf(ctx, content, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSummary provides a mock function with given fields: ctx, content, options
func (_m *AIService) GenerateSummary(ctx context.Context, content string, options services.SummaryOptions) (*services.SummaryResult, error) {
	ret := _m.Called(ctx, content, options)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSummary")
	}

	var r0 *services.SummaryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, services.SummaryOptions) (*services.SummaryResult, error)); ok {
		return rf(ctx, content, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, services.SummaryOptions) *services.SummaryResult); ok {
		r0 = rf(ctx, content, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.SummaryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, services.SummaryOptions) error); ok {
		r1 = rf(ctx, content, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSummaryStream provides a mock function with given fields: ctx, content, options, onToken
func (_m *AIService) GenerateSummaryStream(ctx context.Context, content string, options services.SummaryOptions, onToken func(string)) (*services.SummaryResult, error) {
	ret := _m.Called(ctx, content, options, onToken)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSummaryStream")
	}

	var r0 *services.SummaryResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, services.SummaryOptions, func(string)) (*services.SummaryResult, error)); ok {
		return rf(ctx, content, options, onToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, services.SummaryOptions, func(string)) *services.SummaryResult); ok {
		r0 = rf(ctx, content, options, onToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.SummaryResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, services.SummaryOptions, func(string)) error); ok {
		r1 = rf(ctx, content, options, onToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuggestLabels provides a mock function with given fields: ctx, content, availableLabels
func (_m *AIService) SuggestLabels(ctx context.Context, content string, availableLabels []string) ([]string, error) {
	ret := _m.Called(ctx, content, availableLabels)

	if len(ret) == 0 {
		panic("no return value specified for SuggestLabels")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, error)); ok {
		return rf(ctx, content, availableLabels)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = rf(ctx, content, availableLabels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, content, availableLabels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAIService creates a new instance of AIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIService {
	mock := &AIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
