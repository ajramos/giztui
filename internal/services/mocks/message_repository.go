// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	internalgmail "github.com/ajramos/giztui/internal/gmail"
	gmail "google.golang.org/api/gmail/v1"

	mock "github.com/stretchr/testify/mock"

	services "github.com/ajramos/giztui/internal/services"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// GetDrafts provides a mock function with given fields: ctx, maxResults
func (_m *MessageRepository) GetDrafts(ctx context.Context, maxResults int64) ([]*gmail.Draft, error) {
	ret := _m.Called(ctx, maxResults)

	if len(ret) == 0 {
		panic("no return value specified for GetDrafts")
	}

	var r0 []*gmail.Draft
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*gmail.Draft, error)); ok {
		return rf(ctx, maxResults)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*gmail.Draft); ok {
		r0 = rf(ctx, maxResults)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gmail.Draft)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, maxResults)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessage provides a mock function with given fields: ctx, id
func (_m *MessageRepository) GetMessage(ctx context.Context, id string) (*internalgmail.Message, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 *internalgmail.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*internalgmail.Message, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *internalgmail.Message); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalgmail.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: ctx, opts
func (_m *MessageRepository) GetMessages(ctx context.Context, opts services.QueryOptions) (*services.MessagePage, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 *services.MessagePage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.QueryOptions) (*services.MessagePage, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.QueryOptions) *services.MessagePage); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.MessagePage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.QueryOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchMessages provides a mock function with given fields: ctx, query, opts
func (_m *MessageRepository) SearchMessages(ctx context.Context, query string, opts services.QueryOptions) (*services.MessagePage, error) {
	ret := _m.Called(ctx, query, opts)

	if len(ret) == 0 {
		panic("no return value specified for SearchMessages")
	}

	var r0 *services.MessagePage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, services.QueryOptions) (*services.MessagePage, error)); ok {
		return rf(ctx, query, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, services.QueryOptions) *services.MessagePage); ok {
		r0 = rf(ctx, query, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.MessagePage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, services.QueryOptions) error); ok {
		r1 = rf(ctx, query, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMessage provides a mock function with given fields: ctx, id, updates
func (_m *MessageRepository) UpdateMessage(ctx context.Context, id string, updates services.MessageUpdates) error {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, services.MessageUpdates) error); ok {
		r0 = rf(ctx, id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
