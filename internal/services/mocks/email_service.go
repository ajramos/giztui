// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// EmailService is an autogenerated mock type for the EmailService type
type EmailService struct {
	mock.Mock
}

// ArchiveMessage provides a mock function with given fields: ctx, messageID
func (_m *EmailService) ArchiveMessage(ctx context.Context, messageID string) error {
	ret := _m.Called(ctx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkArchive provides a mock function with given fields: ctx, messageIDs
func (_m *EmailService) BulkArchive(ctx context.Context, messageIDs []string) error {
	ret := _m.Called(ctx, messageIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkArchive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, messageIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkTrash provides a mock function with given fields: ctx, messageIDs
func (_m *EmailService) BulkTrash(ctx context.Context, messageIDs []string) error {
	ret := _m.Called(ctx, messageIDs)

	if len(ret) == 0 {
		panic("no return value specified for BulkTrash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, messageIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkAsRead provides a mock function with given fields: ctx, messageID
func (_m *EmailService) MarkAsRead(ctx context.Context, messageID string) error {
	ret := _m.Called(ctx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkAsUnread provides a mock function with given fields: ctx, messageID
func (_m *EmailService) MarkAsUnread(ctx context.Context, messageID string) error {
	ret := _m.Called(ctx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsUnread")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplyToMessage provides a mock function with given fields: ctx, originalID, replyBody, send, cc
func (_m *EmailService) ReplyToMessage(ctx context.Context, originalID string, replyBody string, send bool, cc []string) error {
	ret := _m.Called(ctx, originalID, replyBody, send, cc)

	if len(ret) == 0 {
		panic("no return value specified for ReplyToMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, []string) error); ok {
		r0 = rf(ctx, originalID, replyBody, send, cc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMessageToFile provides a mock function with given fields: ctx, messageID, filePath
func (_m *EmailService) SaveMessageToFile(ctx context.Context, messageID string, filePath string) error {
	ret := _m.Called(ctx, messageID, filePath)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessageToFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, messageID, filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: ctx, from, to, subject, body
func (_m *EmailService) SendMessage(ctx context.Context, from string, to string, subject string, body string) error {
	ret := _m.Called(ctx, from, to, subject, body)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, from, to, subject, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TrashMessage provides a mock function with given fields: ctx, messageID
func (_m *EmailService) TrashMessage(ctx context.Context, messageID string) error {
	ret := _m.Called(ctx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for TrashMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmailService creates a new instance of EmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailService {
	mock := &EmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
