// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	services "github.com/ajramos/gmail-tui/internal/services"
	mock "github.com/stretchr/testify/mock"
)

// SearchService is an autogenerated mock type for the SearchService type
type SearchService struct {
	mock.Mock
}

// BuildQuery provides a mock function with given fields: ctx, criteria
func (_m *SearchService) BuildQuery(ctx context.Context, criteria services.SearchCriteria) (string, error) {
	ret := _m.Called(ctx, criteria)

	if len(ret) == 0 {
		panic("no return value specified for BuildQuery")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.SearchCriteria) (string, error)); ok {
		return rf(ctx, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.SearchCriteria) string); ok {
		r0 = rf(ctx, criteria)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.SearchCriteria) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSearchHistory provides a mock function with given fields: ctx
func (_m *SearchService) GetSearchHistory(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSearchHistory")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSearchHistory provides a mock function with given fields: ctx, query
func (_m *SearchService) SaveSearchHistory(ctx context.Context, query string) error {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for SaveSearchHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, query, opts
func (_m *SearchService) Search(ctx context.Context, query string, opts services.SearchOptions) (*services.SearchResult, error) {
	ret := _m.Called(ctx, query, opts)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *services.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, services.SearchOptions) (*services.SearchResult, error)); ok {
		return rf(ctx, query, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, services.SearchOptions) *services.SearchResult); ok {
		r0 = rf(ctx, query, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, services.SearchOptions) error); ok {
		r1 = rf(ctx, query, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSearchService creates a new instance of SearchService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSearchService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SearchService {
	mock := &SearchService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
