// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gmail "google.golang.org/api/gmail/v1"
)

// LabelService is an autogenerated mock type for the LabelService type
type LabelService struct {
	mock.Mock
}

// ApplyLabel provides a mock function with given fields: ctx, messageID, labelID
func (_m *LabelService) ApplyLabel(ctx context.Context, messageID string, labelID string) error {
	ret := _m.Called(ctx, messageID, labelID)

	if len(ret) == 0 {
		panic("no return value specified for ApplyLabel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, messageID, labelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkApplyLabel provides a mock function with given fields: ctx, messageIDs, labelID
func (_m *LabelService) BulkApplyLabel(ctx context.Context, messageIDs []string, labelID string) error {
	ret := _m.Called(ctx, messageIDs, labelID)

	if len(ret) == 0 {
		panic("no return value specified for BulkApplyLabel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) error); ok {
		r0 = rf(ctx, messageIDs, labelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkRemoveLabel provides a mock function with given fields: ctx, messageIDs, labelID
func (_m *LabelService) BulkRemoveLabel(ctx context.Context, messageIDs []string, labelID string) error {
	ret := _m.Called(ctx, messageIDs, labelID)

	if len(ret) == 0 {
		panic("no return value specified for BulkRemoveLabel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) error); ok {
		r0 = rf(ctx, messageIDs, labelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateLabel provides a mock function with given fields: ctx, name
func (_m *LabelService) CreateLabel(ctx context.Context, name string) (*gmail.Label, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateLabel")
	}

	var r0 *gmail.Label
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gmail.Label, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gmail.Label); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gmail.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLabel provides a mock function with given fields: ctx, labelID
func (_m *LabelService) DeleteLabel(ctx context.Context, labelID string) error {
	ret := _m.Called(ctx, labelID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLabel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, labelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessageLabels provides a mock function with given fields: ctx, messageID
func (_m *LabelService) GetMessageLabels(ctx context.Context, messageID string) ([]string, error) {
	ret := _m.Called(ctx, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageLabels")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, messageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLabels provides a mock function with given fields: ctx
func (_m *LabelService) ListLabels(ctx context.Context) ([]*gmail.Label, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListLabels")
	}

	var r0 []*gmail.Label
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*gmail.Label, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*gmail.Label); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gmail.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLabel provides a mock function with given fields: ctx, messageID, labelID
func (_m *LabelService) RemoveLabel(ctx context.Context, messageID string, labelID string) error {
	ret := _m.Called(ctx, messageID, labelID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLabel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, messageID, labelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameLabel provides a mock function with given fields: ctx, labelID, newName
func (_m *LabelService) RenameLabel(ctx context.Context, labelID string, newName string) (*gmail.Label, error) {
	ret := _m.Called(ctx, labelID, newName)

	if len(ret) == 0 {
		panic("no return value specified for RenameLabel")
	}

	var r0 *gmail.Label
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*gmail.Label, error)); ok {
		return rf(ctx, labelID, newName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *gmail.Label); ok {
		r0 = rf(ctx, labelID, newName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gmail.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, labelID, newName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLabelService creates a new instance of LabelService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLabelService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LabelService {
	mock := &LabelService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
