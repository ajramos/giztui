// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CacheService is an autogenerated mock type for the CacheService type
type CacheService struct {
	mock.Mock
}

// ClearCache provides a mock function with given fields: ctx, accountEmail
func (_m *CacheService) ClearCache(ctx context.Context, accountEmail string) error {
	ret := _m.Called(ctx, accountEmail)

	if len(ret) == 0 {
		panic("no return value specified for ClearCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, accountEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSummary provides a mock function with given fields: ctx, accountEmail, messageID
func (_m *CacheService) GetSummary(ctx context.Context, accountEmail string, messageID string) (string, bool, error) {
	ret := _m.Called(ctx, accountEmail, messageID)

	if len(ret) == 0 {
		panic("no return value specified for GetSummary")
	}

	var r0 string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, bool, error)); ok {
		return rf(ctx, accountEmail, messageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, accountEmail, messageID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, accountEmail, messageID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, accountEmail, messageID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InvalidateSummary provides a mock function with given fields: ctx, accountEmail, messageID
func (_m *CacheService) InvalidateSummary(ctx context.Context, accountEmail string, messageID string) error {
	ret := _m.Called(ctx, accountEmail, messageID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateSummary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, accountEmail, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSummary provides a mock function with given fields: ctx, accountEmail, messageID, summary
func (_m *CacheService) SaveSummary(ctx context.Context, accountEmail string, messageID string, summary string) error {
	ret := _m.Called(ctx, accountEmail, messageID, summary)

	if len(ret) == 0 {
		panic("no return value specified for SaveSummary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, accountEmail, messageID, summary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCacheService creates a new instance of CacheService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheService {
	mock := &CacheService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
